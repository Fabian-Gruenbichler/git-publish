#!/usr/bin/env python
import os
import sys
import optparse
import re
import tempfile
import shutil
import subprocess
import git

VERSION = '0.1'

tag_version_re = re.compile(r'^[a-zA-Z0-9_\-]+-v(\d+)$')

def setup():
    '''Add git alias in ~/.gitconfig'''
    path = os.path.abspath(sys.argv[0])
    ret = subprocess.call(['git', 'config', '--global',
                           'alias.publish', '!' + path])
    if ret == 0:
        print 'You can now use \'git publish\' like a built-in git command.'

def tag_name(topic, number):
    '''Build a tag name from a topic name and version number'''
    return '%s-v%d' % (topic, number)

def pick_new_version(branch):
    '''Generate a patch version number given a branch name'''
    number = 0
    for tag in git.get_tags('%s-v[0-9]*' % branch):
        m = tag_version_re.match(tag)
        if not m:
            continue
        n = int(m.group(1))
        if n > number:
            number = n
    return number + 1

def get_number_of_commits(base):
    return len(git.log('%s..' % base))

def edit(filename):
    editor = 'vi'
    for envvar in 'VISUAL', 'EDITOR':
        if envvar in os.environ:
            editor = os.environ[envvar]
            break
    subprocess.call([editor, filename])

def tag(topic, number, annotate=False):
    template = ['*** SUBJECT HERE ***', '', '*** BLURB HERE ***']
    if annotate and number > 1:
        template = git.get_tag_message(tag_name(topic, number - 1))

    fd, tmpfile = None, None

    try:
        if annotate:
            fd, tmpfile = tempfile.mkstemp(text=True)
            os.fdopen(fd, 'w').write(os.linesep.join(template + ['']))
            edit(tmpfile)

        git.tag(tag_name(topic, number), annotate=tmpfile)
    finally:
        if tmpfile:
            os.unlink(tmpfile)

def send_email(to_list, cc_list, topic, number, base):
    prefix = None
    if number > 1:
        prefix = 'PATCH v%d' % number

    numbered = get_number_of_commits(base) > 1
    message = git.get_tag_message(tag_name(topic, number))
    cover_letter = bool(message)
    revlist = '%s..' % base

    try:
        tmpdir = tempfile.mkdtemp()

        git.format_patch(revlist,
                         subject_prefix=prefix,
                         output_directory=tmpdir,
                         numbered=numbered,
                         cover_letter=cover_letter)

        if message:
            cover_letter_path = os.path.join(tmpdir, '0000-cover-letter.patch')
            lines = open(cover_letter_path).readlines()
            lines = [s.replace('*** SUBJECT HERE ***', message[0]) for s in lines]
            blurb = os.linesep.join(message[2:])
            lines = [s.replace('*** BLURB HERE ***', blurb) for s in lines]
            open(cover_letter_path, 'w').writelines(lines)

        git.send_email(to_list, cc_list, tmpdir)
    finally:
        if tmpdir:
            shutil.rmtree(tmpdir)

def main():
    parser = optparse.OptionParser(version='%%prog %s' % VERSION,
            description='Prepare and store patch revisions as git tags.',
            epilog='Please report bugs to Stefan Hajnoczi <stefanha@gmail.com>.')
    parser.add_option('-b', '--base', dest='base', default='master',
                      help='branch which this is based off [defaults to master]')
    parser.add_option('--cc', dest='cc', action='append', default=[],
                      help='specify a Cc: email recipient')
    parser.add_option('-n', '--number', type='int', dest='number',
                      help='version number [auto-generated by default]')
    parser.add_option('--no-message', dest='message', action='store_false',
                      help='do not add a message')
    parser.add_option('-m', '--message', dest='message', action='store_true',
                      help='add a message')
    parser.add_option('--setup', dest='setup', action='store_true', default=False,
                      help='add git alias in ~/.gitconfig')
    parser.add_option('-t', '--topic', dest='topic',
                      help='topic name [defaults to current branch name]')
    parser.add_option('--to', dest='to', action='append', default=[],
                      help='specify a primary email recipient')

    options, args = parser.parse_args()

    if options.setup:
        setup()
        return 0

    if options.topic:
        topic = options.topic
    else:
        topic = git.get_current_branch()
        if topic == 'master':
            print 'Please use a topic branch, cannot version master branch'
            return 1

    if options.number:
        number = options.number
    else:
        number = pick_new_version(topic)

    if options.message is None:
        # If there are several commits we probably want a cover letter
        message = get_number_of_commits(options.base) > 1
    else:
        message = options.message

    tag(topic, number, annotate=message)

    if options.to:
        send_email(options.to, options.cc, topic, number, options.base)

    return 0

if __name__ == '__main__':
    sys.exit(main())
